{"version":3,"sources":["context.js","Todo/TodoItem.js","Todo/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","TodoItem","todo","index","onChange","removeTodo","useContext","className","completed","type","checked","id","title","onClick","TodoList","props","todos","map","key","onToggle","App","useState","setTodos","Provider","value","filter","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wRAIeA,G,MAFCC,IAAMC,iB,YCEP,SAASC,EAAT,GAA8C,IAA1BC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACtCC,EAAeC,qBAAWR,GAA1BO,WACR,OACE,wBAAIE,UAAS,oBAAeL,EAAKM,UAAY,YAAc,KACzD,8BACE,2BACEC,KAAK,WACLC,QAASR,EAAKM,UACdJ,SAAU,kBAAMA,EAASF,EAAKS,OAEhC,gCAASR,EAAQ,EAAjB,KAEA,0BAAMI,UAAU,cAAhB,OAAoCL,EAAKU,QAE3C,4BAAQL,UAAU,aAAaM,QAAS,kBAAMR,EAAWH,EAAKS,MAA9D,SCdS,SAASG,EAASC,GAC/B,OACE,yBAAKR,UAAU,aACb,4BACGQ,EAAMC,MAAMC,KAAI,SAACf,EAAMC,GACtB,OACE,kBAAC,EAAD,CACED,KAAMA,EACNgB,IAAKhB,EAAKS,GACVR,MAAOA,EACPC,SAAUW,EAAMI,gBCwBfC,MAjCf,WAAgB,IAAD,EACaC,mBAAS,CACjC,CAAEV,GAAI,EAAGC,MAAO,mDAAYJ,WAAW,GACvC,CAAEG,GAAI,EAAGC,MAAO,gEAAeJ,WAAW,GAC1C,CAAEG,GAAI,EAAGC,MAAO,4EAAiBJ,WAAW,KAJjC,mBACNQ,EADM,KACCM,EADD,KAmBb,OACE,kBAAC,EAAQC,SAAT,CAAkBC,MAAO,CAAEnB,WAL7B,SAAoBM,GAClBW,EAASN,EAAMS,QAAO,SAACvB,GAAD,OAAUA,EAAKS,KAAOA,SAK1C,yBAAKJ,UAAU,OACb,wBAAIA,UAAU,SAAd,0BACCS,EAAMU,OACL,kBAAC,EAAD,CAAUV,MAAOA,EAAOG,SAjBhC,SAAoBR,GAClBW,EACEN,EAAMC,KAAI,SAACf,GAET,OADIA,EAAKS,KAAOA,IAAIT,EAAKM,WAAaN,EAAKM,WACpCN,SAeL,uBAAGK,UAAU,oBAAb,oFCnBUoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.bec8963c.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Context = React.createContext();\r\n\r\nexport default Context;\r\n","import React, { useContext } from \"react\";\r\nimport Context from \"./../context\";\r\nimport \"./TodoItem.scss\";\r\n\r\nexport default function TodoItem({ todo, index, onChange }) {\r\n  const { removeTodo } = useContext(Context);\r\n  return (\r\n    <li className={`todo-item ${todo.completed ? \"item-done\" : \"\"}`}>\r\n      <span>\r\n        <input\r\n          type=\"checkbox\"\r\n          checked={todo.completed}\r\n          onChange={() => onChange(todo.id)}\r\n        ></input>\r\n        <strong>{index + 1}.</strong>\r\n\r\n        <span className=\"item-title\">&nbsp;{todo.title}</span>\r\n      </span>\r\n      <button className=\"btn-remove\" onClick={() => removeTodo(todo.id)}>\r\n        &times;\r\n      </button>\r\n    </li>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./TodoList.scss\";\r\nimport TodoItem from \"./TodoItem\";\r\n\r\nexport default function TodoList(props) {\r\n  return (\r\n    <div className=\"todo-list\">\r\n      <ul>\r\n        {props.todos.map((todo, index) => {\r\n          return (\r\n            <TodoItem\r\n              todo={todo}\r\n              key={todo.id}\r\n              index={index}\r\n              onChange={props.onToggle}\r\n            />\r\n          );\r\n        })}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\nimport \"./App.scss\";\nimport Context from \"./context\";\nimport TodoList from \"./Todo/TodoList\";\n\nfunction App() {\n  const [todos, setTodos] = useState([\n    { id: 1, title: \"Покушать\", completed: false },\n    { id: 2, title: \"Кота помыть\", completed: false },\n    { id: 3, title: \"Ириску помыть\", completed: true },\n  ]);\n\n  function toggleTodo(id) {\n    setTodos(\n      todos.map((todo) => {\n        if (todo.id === id) todo.completed = !todo.completed;\n        return todo;\n      })\n    );\n  }\n  function removeTodo(id) {\n    setTodos(todos.filter((todo) => todo.id !== id));\n  }\n\n  return (\n    <Context.Provider value={{ removeTodo }}>\n      <div className=\"app\">\n        <h1 className=\"title\">Some ToDo list example</h1>\n        {todos.length ? (\n          <TodoList todos={todos} onToggle={toggleTodo} />\n        ) : (\n          <p className=\"placeholder-text\">Задач пока нет...</p>\n        )}\n      </div>\n    </Context.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}